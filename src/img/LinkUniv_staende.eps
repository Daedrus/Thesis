%!PS-Adobe-3.1 EPSF-3.0%%BoundingBox: 20 22 280 194
%%HiResBoundingBox: 20.819 22.195 279.181 193.805
%%Title: (st\214ende_sv)%%Creator: Adobe InDesign 2.0.2%%For: svarteld%%CreationDate: (m\214ndag 28 februari 2005  14.07.47)%%CropBox: 0 0 300 216%%LanguageLevel: 2%%DocumentNeededResources: (atend)%%DocumentSuppliedResources: (atend)%%DocumentNeededFeatures: (atend)%%DocumentSuppliedFeatures: (atend)%%DocumentData: Binary%%Pages: (atend)%%DocumentProcessColors: (atend)%%DocumentCustomColors: (atend)%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 62 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 206 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin		/dictstackcount countdictstack def		/showpage {} def	mark} def/graphic_cleanup{	cleartomark		dictstackcount 1 countdictstack 1 sub {end}for		end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.18 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.18 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined{/Adobe_CoolType_Core userdict/Adobe_CoolType_Coreget def}if userdict/Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.18 def/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2? not{/currentglobal falsedef/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict def}if currentpacking truesetpacking/@_SaveStackLevels{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array putput get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1index exch 0 exch putinterval 1 index exch/args exch put}{pop}ifelse}ifelsebegin count 2 sub 1 index lt{pop count 1 sub}if dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch getinterval astore pop}{pop}ifelsecount 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add defcountdictstack 1 sub @dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel @dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def currentglobal truesetglobal/CTHasResourceForAllBug Level2?{1 dict dup begin mark{(*){pop stop}128 string/Category resourceforall}stopped cleartomark currentdict eq dup{end}if not}{false}ifelse def/CTHasResourceStatusBug Level2?{mark{/steveamerige/Category resourcestatus}stopped{cleartomark true}{cleartomark currentglobalnot}ifelse}{false}ifelse def setglobal/CTResourceStatus{mark 3 1 roll/Categoryfindresource begin({ResourceStatus} stopped)0()/SubFileDecode filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse end}bind def/CTWorkAroundBugs{Level2?{/cid_PreLoad/ProcSet resourcestatus{pop popcurrentglobal mark{(*){dup/CMap CTHasResourceStatusBug{CTResourceStatus}{resourcestatus}ifelse{pop dup 0 eq exch 1 eq or{dup/CMap findresource gchecksetglobal/CMap undefineresource}{pop CTHasResourceForAllBug{exit}{stop}ifelse}ifelse}{pop}ifelse}128 string/CMap resourceforall}stopped{cleartomark}stoppedpop setglobal}if}if}bind def/doc_setup{Adobe_CoolType_Core beginCTWorkAroundBugs/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 10 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def/InVMFontsByCMap 10 dict def/InVMDeepCopiedFonts 10 dictdef end put}bind def/doc_trailer{currentdict Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}binddef/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfontsystemdict begin userdict begin/globaldict where{/globaldict get begin}if dupwhere pop exch get/globaldict where{pop end}if end endAdobe_CoolType_Core_Defined{/systemfindfont exch def}{/findfont 1 index def/systemfindfont exch def}ifelse/undefinefont{pop}ndf/copyfont{currentglobal 31 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 indexlength add 1 add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dupnull eq{pop}{{def}forall}ifelse currentdict end exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup length array copy exchsetglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 indexknown{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory 3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1 roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1 index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def currentdict end definefontpop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies known{exch $Strategies exch 2copy known{get 2 copy maxlength exch maxlength add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get exec}if end/$Strategy exchdef}{pop pop pop}ifelse}{pop pop}ifelse end}bind def/scff{$SubstituteFontbegin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def/$inVMIndex $sname null eq{1 index $str cvs dup length $slensub $slen getinterval cvn}{$sname}ifelse def end{findfont}@Stopped{dup length8 add string exch 1 index 0(BadFont:)putinterval 1 index exch 8 exch duplength string cvs putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if$SubstituteFont begin/$sname null def/$slen 0 def/$inVMIndex null def end}binddef/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$inVMIndex null def/$doSmartSub true def/$depth 0def/$fontname null def/$italicangle 26.5 def/$dstack null def/$Strategies 10dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dictbegin/UseFont exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup0 1 255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dupbegin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch Adobe_CoolType_Data/InVMDeepCopiedFonts get 1 index/FontName get known{pop Adobe_CoolType_Data/InVMDeepCopiedFonts get 1 indexget null copyfont}{$deepcopyfont}ifelse exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefontAdobe_CoolType_Data/InVMDeepCopiedFonts get begin dup/FontBasedOn get 1 indexdef end}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0 setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120sub x 10 div exch moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlinetoclosepath gsave Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal exch dup gcheck setglobal null copyfont begin/FontBasedOncurrentdict/FontName known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName $fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup sin exch cos div 1 0 0]matrixconcatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict enddefinefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique SetSubstituteStrategy/$findfontByEnum{duptype/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs duplength $slen sub $slen getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def $SubstituteFont/$dstackcountdictstack array dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdicttrue $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{beginfalse}ifelse}forall pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dupbegin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict dup/FontName/copied put copyfontbegin/FDepVector FDepVector copyarray 0 1 2 index length 1 sub{2 copy get$deepcopyfont dup/FontName/copied put/copied exch definefont 3 copy put poppop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}binddef/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index$cmapname $fontpat cvs putinterval $cmapname length add $str exch 0 exchgetinterval cvn}bind def/$findfontByROS{/$fontname exch def $ROS Registry 2copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelsefalse exch{dup/CIDFont resourcestatus{pop pop save 1 index/CIDFontfindresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch popexch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs$buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnlyknown{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get dup/Registryget Registry eq exch/Ordering get Ordering eq and and{exch restore exch poptrue exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end currentdict/$errorknown currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Categoryresourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def duplength $slen gt $sname null ne or $slen 0 gt and{$sname null eq{dup $str cvsdup length $slen sub $slen getinterval cvn}{$sname}ifelse Adobe_CoolType_Data/InVMFontsByCMap get 1 index 2 copy known{get false exch{pop currentglobal{GlobalFontDirectory 1 index known{exch pop true exit}{pop}ifelse}{FontDirectory 1 index known{exch pop true exit}{GlobalFontDirectory 1 indexknown{exch pop true exit}{pop}ifelse}ifelse}ifelse}forall}{pop pop false}ifelse{exch pop exch pop}{dup/CMap resourcestatus{pop pop dup/$cmapname exchdef/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 stringcvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop poppop $findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 indexsub exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll addgetinterval exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1 roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for duptype/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop$findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$findfontByEnum}{//SubstituteFont exec}ifelse end}}ifelse bind readonlydef Adobe_CoolType_Core/scfindfont/systemfindfont load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName getdup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound true def}if exch pop{$slen 0 gt$sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfontdup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forallcurrentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse$origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core_Defined not{Adobe_CoolType_Core/findfont{$SubstituteFontbegin $depth 0 eq{/$fontname 1 index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont$SubstituteFont begin/$depth $depth 1 sub def $substituteFound $depth 0 eq and{$inVMIndex null ne{dup $inVMIndex $AddInVMFont}if $doSmartSub{currentdict/$Strategy known{$Strategy/$BuildFont get exec}if}if}if end}bind put}if}if end/$AddInVMFont{exch/FontName 2 copy known{get 1 dict dup begin exch 1 indexgcheck def end exch Adobe_CoolType_Data/InVMFontsByCMap get exch $DictAdd}{poppop pop}ifelse}bind def/$DictAdd{2 copy known not{2 copy 4 index length dictput}if Level2? not{2 copy get dup maxlength exch length 4 index length add lt2 copy get dup length 4 index length add exch maxlength 1 index lt{2 mul dictbegin 2 copy get{forall}def 2 copy currentdict put end}{pop}ifelse}if getbegin{def}forall end}bind def end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.14 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.14 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_BadResourceImplementation? ct_Level2?{savecurrentglobal true setglobal/Generic/Category findresource dup length dictcopy dup/InstanceType/dicttype put/egiremaevets exch/Category defineresourcepop setglobal/foo 1 dict dup/s 3 put/egiremaevets defineresource pop restoremark{/bar 1 dict dup/a 7 put/egiremaevets defineresource}stopped{cleartomarktrue}{cleartomark false}ifelse currentglobal true setglobal/egiremaevets/Category undefineresource setglobal}{false}ifelse def/ct_UseNativeCapability?systemdict/composefont known def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2string def/dst_string 1500 string def/nullstring()def/usewidths? true def enddef ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel known{pop/CIDFont findresource/GlyphDirectory get}{1index/CIDFont findresource/GlyphDirectory get dup type/dicttype eq{dup dupmaxlength exch length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3dict begin/vm exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm setglobal/gvm currentglobal def $ gcheck setglobal}if?{$ begin}if}def/?{$ type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data beginbegin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256mod put stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3 1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevelknown{gvm setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001 0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch errordict exch get exec stop}bind def/ct_reraise{cvx$error/errorname get(Error: )print dup(                    )cvs printerrordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1roll{2 index exch get exch 8 bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dupdst_string length gt{dup string/dst_string exch def}if 1 index ct_CID_STR_SIZEidiv/arrayIndex exch def 2 index arrayIndex get 2 index arrayIndexct_CID_STR_SIZE mul sub{dup 3 index add 2 index length le{2 index getintervaldst_string dst_index 2 index putinterval length dst_index add/dst_index exchdef exit}{1 index length 1 index sub dup 4 1 roll getinterval dst_stringdst_index 2 index putinterval pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2 index dup length arrayIndex gt{arrayIndexget}{pop exit}ifelse 0}ifelse}loop pop pop pop dst_string 0 dst_indexgetinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark truesetglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomarksetglobal true}{cleartomark currentglobal not exch setglobal}ifelse{{mark 3 1roll/Category findresource begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobalend}}{{resourcestatus}}ifelse bind def ct_BadResourceImplementation?{currentglobal true setglobal/CIDFont/Category undefineresource setglobal}if/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 70 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				has_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict/Width get def			/Height DataDict/Height get def			/ImageMatrix DataDict/ImageMatrix get def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [1 0] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/has_mask{	dup type /dicttype eq	{		dup /Mask known	{dup /Mask get}{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin		dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf		begin	gsave		0 1 translate 1 -1 Height div scale		1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse				<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [1 0]		>>		imagemask				grestore				0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					has_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						image					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								has_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			has_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def		/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def		{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: 5 1%%EndPageComments%%BeginPageSetupAdobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -216 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark% page clipgsavenewpathgsave % PSGState0 0 mo0 216 li300 216 li300 0 liclp[1 0 0 1 0 0 ] concat32.5968 185.284 mo32.5968 181.747 li25.031 181.747 li25.031 162.167 li20.8278 162.167 li20.8278 185.284 li32.5968 185.284 licp38.0816 185.284 mo38.0816 169.067 li34.1236 169.067 li34.1236 185.284 li38.0816 185.284 licp53.311 185.284 mo53.311 173.305 li53.311 170.293 52.2953 168.682 49.4231 168.682 cv47.7067 168.682 46.5509 169.662 45.1848 171.238 cv45.1848 168.997 li41.1568 168.997 li41.1568 185.284 li45.1848 185.284 li45.1848 174.706 li45.465 174.216 li46.7961 172.044 47.8819 171.939 48.127 171.939 cv48.2322 171.939 48.3372 171.939 48.4073 171.974 cv49.2479 172.149 49.283 173.48 49.283 174.076 cv49.283 185.284 li53.311 185.284 licp67.8222 185.284 mo63.4089 176.528 li67.7522 169.032 li63.7241 169.032 li60.2564 175.337 li60.2564 159.75 li56.2634 159.75 li56.2634 185.284 li60.2564 185.284 li60.2564 177.859 li63.689 185.284 li67.8222 185.284 licp81.8676 177.158 mo81.8676 172.359 79.1705 168.576 74.9323 168.576 cv70.6941 168.576 67.997 172.359 67.997 177.158 cv67.997 181.992 70.6941 185.74 74.9323 185.74 cv79.1705 185.74 81.8676 181.992 81.8676 177.158 cvcp90.2385 185.74 mo88.8024 185.74 88.1369 185.424 87.7867 185.214 cv87.7867 193.445 li83.7586 193.445 li83.7586 168.997 li87.7867 168.997 li87.7867 171.028 li88.3471 169.978 89.503 168.541 91.5346 168.541 cv94.862 168.541 96.9637 172.009 96.9637 176.668 cv96.9637 181.747 94.3016 185.74 90.2385 185.74 cvcp103.013 185.284 mo103.013 169.067 li99.0546 169.067 li99.0546 185.284 li103.013 185.284 licp118.242 185.284 mo118.242 173.305 li118.242 170.293 117.227 168.682 114.354 168.682 cv112.638 168.682 111.482 169.662 110.116 171.238 cv110.116 168.997 li106.088 168.997 li106.088 185.284 li110.116 185.284 li110.116 174.706 li110.396 174.216 li111.727 172.044 112.813 171.939 113.058 171.939 cv113.164 171.939 113.269 171.939 113.339 171.974 cv114.179 172.149 114.214 173.48 114.214 174.076 cv114.214 185.284 li118.242 185.284 licp134.242 171.904 mo134.242 168.962 li131.125 169.207 li129.584 169.207 li128.323 168.682 127.552 168.541 126.571 168.541 cv122.613 168.541 120.617 171.589 120.617 174.776 cv120.617 176.317 121.002 177.613 121.738 178.734 cv122.053 179.19 122.438 179.645 123.314 180.24 cv122.964 180.486 122.683 180.696 122.368 180.906 cv121.528 181.501 120.407 182.412 120.407 183.568 cv120.407 184.479 120.897 185.074 122.298 185.74 cv120.687 187.456 120.126 188.507 120.126 189.733 cv120.126 192.079 122.123 193.796 125.871 193.796 cv130.775 193.796 133.752 190.748 133.752 186.79 cv133.752 184.268 132.736 183.008 129.654 183.008 cv125.03 183.008 li124.75 183.008 124.575 182.972 124.505 182.832 cv124.435 182.727 124.47 182.552 124.47 182.412 cv124.47 181.957 124.89 181.431 125.696 180.696 cv125.941 180.696 126.186 180.731 126.431 180.731 cv130.389 180.731 132.491 178.174 132.491 174.531 cv132.491 173.515 132.316 172.85 131.755 171.904 cv134.242 171.904 licp146.266 170.118 mo144.69 168.997 142.869 168.436 140.907 168.436 cv137.194 168.436 135.268 170.608 135.268 173.55 cv135.268 175.687 136.389 176.843 138.596 178.104 cv139.331 178.489 140.242 178.839 140.942 179.295 cv141.678 179.75 142.238 180.31 142.238 181.151 cv142.238 182.097 141.398 182.727 140.137 182.727 cv139.191 182.727 138.49 182.482 137.86 182.132 cv137.23 181.782 136.704 181.326 136.144 180.871 cv134.848 183.918 li136.634 185.039 138.385 185.74 140.522 185.74 cv144.2 185.74 146.091 183.428 146.091 181.151 cv146.091 178.524 145.496 177.648 143.254 176.317 cv142.448 175.827 141.433 175.442 140.627 174.951 cv139.821 174.461 139.156 173.866 139.156 173.06 cv139.156 172.079 140.067 171.449 141.328 171.449 cv142.554 171.449 143.499 171.974 144.375 172.71 cv144.585 172.85 144.76 173.025 144.935 173.165 cv146.266 170.118 licp166.582 185.284 mo166.582 168.997 li162.554 168.997 li162.554 179.575 li162.063 180.275 li160.837 182.132 159.856 182.342 159.576 182.342 cv159.541 182.342 159.506 182.342 159.471 182.342 cv158.525 182.272 158.455 180.871 158.455 180.205 cv158.455 168.997 li154.427 168.997 li154.427 180.976 li154.427 183.988 155.443 185.564 158.315 185.564 cv160.032 185.564 161.188 184.619 162.554 183.043 cv162.554 185.284 li166.582 185.284 licp181.856 185.284 mo181.856 173.305 li181.856 170.293 180.841 168.682 177.968 168.682 cv176.252 168.682 175.096 169.662 173.73 171.238 cv173.73 168.997 li169.702 168.997 li169.702 185.284 li173.73 185.284 li173.73 174.706 li174.01 174.216 li175.341 172.044 176.427 171.939 176.672 171.939 cv176.778 171.939 176.883 171.939 176.953 171.974 cv177.793 172.149 177.828 173.48 177.828 174.076 cv177.828 185.284 li181.856 185.284 licp188.767 185.284 mo188.767 169.067 li184.809 169.067 li184.809 185.284 li188.767 185.284 licp203.513 168.997 mo199.59 168.997 li197.278 178.419 li197.138 178.909 196.893 180.521 196.893 180.521 cv196.893 180.521 196.648 178.874 196.542 178.419 cv194.301 168.997 li190.238 168.997 li194.791 185.284 li198.469 185.284 li203.513 168.997 licp216.171 177.648 mo216.171 176.002 li216.171 171.624 214.069 168.541 210.357 168.541 cv205.698 168.541 203.421 171.904 203.421 177.578 cv203.421 182.482 206.223 185.74 210.111 185.74 cv212.598 185.74 214.209 185.284 216.101 184.163 cv214.875 181.291 li213.474 182.062 212.213 182.447 210.532 182.447 cv208.605 182.447 207.624 180.31 207.519 178.734 cv207.484 178.454 207.484 178.139 207.484 177.648 cv216.171 177.648 licp225.838 173.971 mo225.418 173.62 224.998 173.41 224.472 173.41 cv222.931 173.41 222.23 175.442 222.23 177.824 cv222.23 185.284 li218.237 185.284 li218.237 168.997 li221.775 168.997 li221.915 172.289 li222.476 170.293 223.596 168.752 224.717 168.752 cv225.418 168.752 226.329 169.102 226.889 169.872 cv225.838 173.971 licp237.081 173.165 mo236.906 173.025 236.731 172.85 236.521 172.71 cv235.645 171.974 234.7 171.449 233.474 171.449 cv232.213 171.449 231.302 172.079 231.302 173.06 cv231.302 173.866 231.968 174.461 232.773 174.951 cv233.579 175.442 234.595 175.827 235.4 176.317 cv237.642 177.648 238.237 178.524 238.237 181.151 cv238.237 183.428 236.346 185.74 232.668 185.74 cv230.531 185.74 228.78 185.039 226.994 183.918 cv228.29 180.871 li228.85 181.326 229.376 181.782 230.006 182.132 cv230.637 182.482 231.337 182.727 232.283 182.727 cv233.544 182.727 234.384 182.097 234.384 181.151 cv234.384 180.31 233.824 179.75 233.088 179.295 cv232.388 178.839 231.477 178.489 230.742 178.104 cv228.535 176.843 227.414 175.687 227.414 173.55 cv227.414 170.608 229.341 168.436 233.053 168.436 cv235.015 168.436 236.836 168.997 238.412 170.118 cv237.081 173.165 licp240.339 185.284 mo240.339 169.067 li244.297 169.067 li244.297 185.284 li240.339 185.284 licp254.654 184.479 mo253.603 185.214 252.552 185.74 251.186 185.74 cv248.945 185.74 248.384 184.584 248.384 182.237 cv248.384 172.009 li246.423 172.009 li246.423 169.452 li248.384 169.032 li248.384 164.128 li252.097 164.128 li252.097 168.997 li254.969 168.997 li254.969 172.009 li252.097 172.009 li252.097 179.33 li252.097 181.046 252.167 181.957 252.833 181.957 cv253.568 181.957 254.058 181.361 254.619 181.011 cv255.635 183.708 li255.319 183.988 255.004 184.233 254.654 184.479 cvcp260.188 177.648 mo260.188 178.139 260.188 178.454 260.223 178.734 cv260.328 180.31 261.309 182.447 263.235 182.447 cv264.917 182.447 266.178 182.062 267.579 181.291 cv268.805 184.163 li266.913 185.284 265.302 185.74 262.815 185.74 cv258.927 185.74 256.125 182.482 256.125 177.578 cv256.125 171.904 258.402 168.541 263.06 168.541 cv266.773 168.541 268.875 171.624 268.875 176.002 cv268.875 177.648 li260.188 177.648 licp279.172 183.708 mo278.156 181.011 li277.596 181.361 277.106 181.957 276.37 181.957 cv275.705 181.957 275.635 181.046 275.635 179.33 cv275.635 172.009 li278.507 172.009 li278.507 168.997 li275.635 168.997 li275.635 164.128 li271.922 164.128 li271.922 169.032 li269.96 169.452 li269.96 172.009 li271.922 172.009 li271.922 182.237 li271.922 184.584 272.482 185.74 274.724 185.74 cv276.09 185.74 277.141 185.214 278.192 184.479 cv278.542 184.233 278.857 183.988 279.172 183.708 cvcp77.7344 177.158 mo77.7344 180.801 76.1582 182.657 74.9323 182.657 cv73.7064 182.657 72.1652 180.906 72.1652 177.158 cv72.1652 173.725 73.7064 171.659 74.9323 171.659 cv76.1582 171.659 77.7344 173.725 77.7344 177.158 cvcp90.3786 171.869 mo89.3628 171.869 88.1719 173.515 87.7867 174.461 cv87.7867 179.925 li87.7867 181.221 88.3471 182.587 89.8883 182.587 cv91.3244 182.587 92.7955 180.415 92.7955 176.913 cv92.7955 173.9 91.7097 171.869 90.3786 171.869 cvcp128.428 174.636 mo128.428 177.368 127.307 177.964 126.571 177.964 cv125.836 177.964 124.715 177.403 124.715 174.671 cv124.715 172.009 125.836 171.309 126.536 171.309 cv127.272 171.309 128.428 171.974 128.428 174.636 cvcp130.144 187.456 mo130.144 189.207 128.218 190.783 126.361 190.783 cv124.855 190.783 123.559 189.873 123.559 188.717 cv123.559 187.841 123.979 187.036 124.47 186.16 cv128.813 186.16 li129.969 186.16 130.144 186.825 130.144 187.456 cvcp212.143 175.267 mo207.659 175.267 li207.73 172.78 208.675 171.449 210.111 171.449 cv211.232 171.449 212.038 172.64 212.143 175.267 cvcp262.815 171.449 mo261.379 171.449 260.433 172.78 260.363 175.267 cv264.846 175.267 li264.741 172.64 263.936 171.449 262.815 171.449 cvfalse sop0 0 0 1 cmykf101.033 166.471 mo102.242 166.471 103.222 165.491 103.222 164.283 cv103.222 163.074 102.242 162.094 101.033 162.094 cv99.824 162.094 98.8442 163.074 98.8442 164.283 cv98.8442 165.491 99.824 166.471 101.033 166.471 cv0 0 0 1 cmykf71.997 166.457 mo73.2057 166.457 74.1855 165.477 74.1855 164.268 cv74.1855 163.06 73.2057 162.08 71.997 162.08 cv70.7883 162.08 69.8085 163.06 69.8085 164.268 cv69.8085 165.477 70.7883 166.457 71.997 166.457 cv0 0 0 1 cmykf77.7288 166.457 mo78.9375 166.457 79.9173 165.477 79.9173 164.268 cv79.9173 163.06 78.9375 162.08 77.7288 162.08 cv76.5201 162.08 75.5403 163.06 75.5403 164.268 cv75.5403 165.477 76.5201 166.457 77.7288 166.457 cv0 0 0 1 cmykf186.835 166.471 mo188.044 166.471 189.024 165.491 189.024 164.283 cv189.024 163.074 188.044 162.094 186.835 162.094 cv185.627 162.094 184.647 163.074 184.647 164.283 cv184.647 165.491 185.627 166.471 186.835 166.471 cv0 0 0 1 cmykf242.288 166.471 mo243.497 166.471 244.477 165.491 244.477 164.283 cv244.477 163.074 243.497 162.094 242.288 162.094 cv241.079 162.094 240.1 163.074 240.1 164.283 cv240.1 165.491 241.079 166.471 242.288 166.471 cv0 0 0 1 cmykf36.1276 166.443 mo37.3363 166.443 38.3161 165.463 38.3161 164.254 cv38.3161 163.046 37.3363 162.066 36.1276 162.066 cv34.9189 162.066 33.9391 163.046 33.9391 164.254 cv33.9391 165.463 34.9189 166.443 36.1276 166.443 cv0 0 0 1 cmykf127.407 42.2325 mo127.407 69.6434 li148.559 81.8197 li148.559 66.7805 li141.913 62.8996 li141.913 42.2325 li127.407 42.2325 li0 0 0 1 cmykf156.963 42.2318 mo156.963 62.8996 li150.315 66.7805 li150.315 81.8197 li171.323 69.5943 li171.323 42.2318 li156.963 42.2318 li0 0 0 1 cmykf151.193 83.3486 mo172.347 71.0268 li195.874 84.6596 li188.647 97.1762 li170.989 86.9395 li164.342 90.8702 li151.193 83.3486 li0 0 0 1 cmykf150.315 84.8567 mo150.315 109.439 li173.894 123.121 li181.143 110.499 li163.318 100.138 li163.318 92.2306 li150.315 84.8567 li0 0 0 1 cmykf148.554 84.8567 mo148.554 109.46 li125.191 123.113 li117.893 110.382 li135.649 100.049 li135.649 92.3351 li148.554 84.8567 li0 0 0 1 cmykf126.561 71.0922 mo147.664 83.366 li134.76 90.9343 li127.871 86.9561 li110.163 97.289 li102.887 84.8212 li126.561 71.0922 li0 0 0 1 cmykf204.217 82.965 mo207.264 84.8039 li210.31 82.965 li207.264 81.1262 li204.217 82.965 licp0 0 0 1 cmyk0.5 lw0 lc0 lj4 ml[] 0 dshtrue sadjgsave[1.02707 -1.02707 1.02707 1.02707 386.509 575.928 ] concatsgrestore newpath88.0122 82.965 mo91.0585 84.8039 li94.1047 82.965 li91.0585 81.1262 li88.0122 82.965 licp0 0 0 1 cmykgsave[1.02707 -1.02707 1.02707 1.02707 270.304 575.928 ] concatsgrestore newpath91.6661 100.389 mo91.5359 99.8554 li90.6296 100.066 li90.0222 97.5763 li95.698 96.2604 li95.9691 97.3717 li96.5635 97.2339 li95.7464 93.8854 li95.1521 94.0232 li95.4232 95.1344 li89.7029 96.4606 li89.4317 95.3494 li88.882 95.4768 li90.1654 100.737 li91.6661 100.389 licp92.4188 105.666 mo92.0388 104.587 li97.5828 102.652 li97.9627 103.731 li98.5387 103.53 li97.3937 100.279 li96.8177 100.48 li97.1977 101.559 li91.6537 103.494 li91.2737 102.415 li90.7409 102.601 li91.886 105.852 li92.4188 105.666 licp101.619 111.559 mo102.128 112.583 li102.672 112.308 li101.308 109.563 li100.763 109.838 li101.279 110.876 li97.3854 112.843 li99.916 106.763 li99.0405 105.001 li98.496 105.276 li98.9711 106.232 li98.7529 106.684 li93.8658 109.153 li93.3568 108.129 li92.8531 108.383 li94.2173 111.128 li94.721 110.874 li94.2051 109.836 li98.221 107.807 li95.5608 114.106 li95.7644 114.516 li101.619 111.559 licp102.435 122.943 mo101.976 122.314 li102.922 118.047 li106.393 118.406 li106.951 119.17 li107.446 118.814 li105.918 116.719 li105.423 117.075 li105.809 117.605 li101.95 117.205 li100.934 121.843 li101.976 123.272 li102.435 122.943 licp100.134 119.788 mo99.4595 118.864 li104.228 115.437 li104.902 116.361 li105.397 116.005 li103.366 113.22 li102.871 113.576 li103.545 114.5 li98.7765 117.928 li98.1025 117.003 li97.6443 117.333 li99.6753 120.118 li100.134 119.788 licp105.086 126.828 mo106.428 128.203 108.853 128.198 110.293 126.813 cv111.711 125.45 111.781 123.055 110.439 121.68 cv109.075 120.283 106.672 120.267 105.243 121.641 cv103.792 123.037 103.722 125.432 105.086 126.828 cvcp113.237 122.057 mo113.545 121.761 113.563 121.277 113.265 120.972 cv112.966 120.666 112.479 120.669 112.171 120.965 cv111.875 121.251 111.856 121.734 112.155 122.04 cv112.453 122.345 112.94 122.342 113.237 122.057 cvcp111.213 119.983 mo111.52 119.687 111.539 119.204 111.24 118.899 cv110.942 118.593 110.455 118.596 110.147 118.892 cv109.85 119.178 109.832 119.661 110.13 119.966 cv110.429 120.272 110.916 120.269 111.213 119.983 cvcp109.967 122.113 mo110.862 123.029 110.608 124.712 109.377 125.896 cv108.135 127.091 106.442 127.301 105.537 126.373 cv104.642 125.457 104.917 123.774 106.159 122.58 cv107.379 121.406 109.072 121.196 109.967 122.113 cvcp112.172 132.141 mo111.281 131.424 li114.918 126.814 li115.607 127.369 li116.32 127.943 116.383 128.699 115.779 129.465 cv115.202 130.196 114.279 130.333 113.602 129.787 cv113.518 129.72 113.48 129.67 113.383 129.572 cv113.081 129.955 li113.278 130.173 113.363 130.262 113.542 130.405 cv114.646 131.295 116.03 131.215 116.824 130.209 cv117.608 129.215 117.434 128.057 116.377 127.205 cv113.502 124.89 li113.124 125.369 li114.015 126.087 li110.378 130.697 li109.488 129.979 li109.138 130.422 li111.822 132.584 li112.172 132.141 licp118.665 136.519 mo117.695 135.913 li120.791 130.924 li121.761 131.53 li122.083 131.012 li119.159 129.186 li118.838 129.705 li119.808 130.31 li116.712 135.299 li115.741 134.694 li115.444 135.173 li118.368 136.998 li118.665 136.519 licp129.517 135.344 mo130.554 135.828 li130.806 135.273 li128.028 133.976 li127.776 134.531 li128.826 135.022 li127.027 138.996 li125.195 132.653 li123.412 131.821 li123.161 132.376 li124.128 132.828 li124.241 133.318 li121.982 138.306 li120.946 137.822 li120.713 138.336 li123.49 139.633 li123.723 139.119 li122.673 138.629 li124.529 134.53 li126.397 141.125 li126.812 141.319 li129.517 135.344 licp136.577 141.652 mo137.696 141.955 li137.841 141.41 li134.5 140.505 li134.354 141.05 li135.473 141.353 li135.017 143.063 li134.515 143.053 134.301 143.027 134.006 142.947 cv132.254 142.473 131.364 140.842 131.851 139.014 cv132.291 137.364 133.769 136.437 135.315 136.855 cv135.889 137.01 136.31 137.266 136.882 137.785 cv136.702 138.462 li137.246 138.61 li137.714 136.856 li137.169 136.709 li137.063 137.107 li136.298 136.6 135.88 136.392 135.306 136.236 cv133.157 135.655 131.096 136.756 130.549 138.804 cv129.995 140.882 131.199 142.82 133.422 143.421 cv134.261 143.648 134.911 143.698 136.055 143.612 cv136.577 141.652 licp140.1 144.319 mo140.649 144.72 141.174 144.949 141.75 145.015 cv143.007 145.158 144.054 144.403 144.196 143.268 cv144.318 142.284 144.015 141.758 142.803 140.883 cv142.507 140.665 142.17 140.411 141.804 140.139 cv141.327 139.778 141.186 139.547 141.235 139.153 cv141.313 138.533 141.832 138.193 142.544 138.274 cv142.953 138.321 143.216 138.428 143.768 138.813 cv143.673 139.57 li144.234 139.634 li144.46 137.818 li143.9 137.754 li143.852 138.132 li143.443 137.84 143.017 137.684 142.517 137.627 cv141.305 137.488 140.243 138.242 140.107 139.331 cv139.995 140.224 140.384 140.806 141.634 141.624 cv142.813 142.404 143.173 142.844 143.101 143.419 cv143.027 144.009 142.429 144.371 141.672 144.284 cv141.156 144.225 140.749 144.041 140.188 143.608 cv140.286 142.821 li139.726 142.757 li139.49 144.649 li140.051 144.713 li140.1 144.319 licp157.684 137.785 mo154.625 137.979 li154.671 138.587 li155.813 138.515 li156.105 142.317 li156.199 143.549 155.445 144.483 154.304 144.555 cv153.193 144.626 152.381 143.821 152.286 142.574 cv151.992 138.757 li153.149 138.684 li153.102 138.076 li149.647 138.294 li149.694 138.903 li150.851 138.829 li151.169 142.966 li151.278 144.395 152.546 145.37 154.175 145.266 cv155.91 145.156 157.011 143.956 156.885 142.313 cv156.589 138.466 li157.731 138.394 li157.684 137.785 licp165.314 136.509 mo166.425 136.238 li166.281 135.645 li163.303 136.372 li163.447 136.965 li164.573 136.69 li165.598 140.93 li160.266 137.113 li158.355 137.579 li158.498 138.172 li159.535 137.919 li159.925 138.232 li161.212 143.554 li160.1 143.825 li160.233 144.374 li163.211 143.647 li163.079 143.098 li161.953 143.373 li160.895 139 li166.411 142.992 li166.855 142.883 li165.314 136.509 licp172.615 140.042 mo171.546 140.448 li169.448 134.964 li170.518 134.557 li170.3 133.988 li167.078 135.212 li167.296 135.782 li168.365 135.376 li170.462 140.86 li169.393 141.267 li169.595 141.794 li172.816 140.569 li172.615 140.042 licp176.934 131.359 mo177.5 131.06 li177.222 130.517 li175.266 131.549 li175.544 132.092 li176.313 131.686 li176.761 136.778 li172.874 133.501 li173.723 133.053 li173.445 132.51 li170.828 133.89 li171.106 134.433 li171.767 134.085 li177.212 138.696 li177.535 138.525 li176.934 131.359 licp185.287 131.795 mo184.823 132.116 li185.279 132.784 li183.148 134.261 li181.643 132.057 li183.247 130.945 li183.677 131.574 li184.141 131.253 li182.945 129.503 li182.49 129.837 li182.903 130.441 li181.299 131.553 li179.862 129.45 li181.918 128.025 li182.365 128.68 li182.816 128.367 li181.853 126.957 li181.389 127.278 li181.561 127.53 li177.625 130.258 li177.943 130.724 li178.884 130.073 li182.222 134.959 li181.282 135.611 li181.6 136.076 li186.087 132.966 li185.287 131.795 licp192.807 126.32 mo192.494 126.611 li192.249 126.84 191.914 126.902 191.467 126.797 cv189.033 126.229 li189.647 125.407 189.601 124.429 188.914 123.673 cv188.082 122.759 187.061 122.814 185.978 123.822 cv183.343 126.275 li183.754 126.726 li184.591 125.946 li188.543 130.29 li187.705 131.069 li188.085 131.487 li190.608 129.138 li190.228 128.721 li189.391 129.5 li187.687 127.627 li188.234 127.118 li191.081 127.823 li191.75 127.992 191.881 127.954 192.372 127.496 cv193.187 126.738 li192.807 126.32 licp185.44 125.157 mo186.221 124.429 li186.801 123.889 187.432 123.948 188.007 124.579 cv188.571 125.2 188.605 125.94 188.069 126.438 cv187.277 127.176 li185.44 125.157 licp194.689 124.599 mo195.328 124.362 195.811 124.051 196.185 123.609 cv197.002 122.642 196.95 121.357 196.079 120.616 cv195.324 119.974 194.716 119.937 193.311 120.464 cv192.965 120.59 192.566 120.732 192.136 120.886 cv191.569 121.085 191.298 121.074 190.996 120.817 cv190.519 120.412 190.522 119.794 190.985 119.247 cv191.251 118.933 191.486 118.772 192.114 118.526 cv192.695 119.02 li193.06 118.589 li191.666 117.403 li191.301 117.834 li191.592 118.081 li191.12 118.261 190.753 118.529 190.428 118.914 cv189.64 119.845 189.682 121.142 190.519 121.854 cv191.204 122.437 191.906 122.433 193.284 121.843 cv194.589 121.291 195.157 121.234 195.599 121.609 cv196.052 121.994 196.023 122.69 195.53 123.273 cv195.196 123.669 194.815 123.906 194.143 124.134 cv193.538 123.621 li193.174 124.052 li194.626 125.287 li194.991 124.856 li194.689 124.599 licp200.191 116.979 mo199.539 117.919 li194.693 114.604 li195.344 113.664 li194.841 113.319 li192.877 116.152 li193.381 116.496 li194.032 115.556 li198.879 118.872 li198.227 119.812 li198.693 120.13 li200.656 117.298 li200.191 116.979 licp203.683 110.82 mo203.078 111.967 li197.886 109.225 li198.925 107.256 li199.68 107.654 li199.944 107.155 li198.379 106.329 li198.116 106.828 li198.386 106.971 li195.767 111.935 li195.497 111.792 li195.241 112.278 li196.805 113.104 li197.061 112.618 li196.306 112.219 li197.345 110.25 li202.537 112.992 li201.932 114.138 li202.431 114.402 li204.182 111.084 li203.683 110.82 licp206.265 102.331 mo206.065 102.859 li206.823 103.14 li205.901 105.563 li203.399 104.636 li204.092 102.811 li204.807 103.076 li205.008 102.549 li203.02 101.812 li202.834 102.345 li203.52 102.599 li202.827 104.424 li200.438 103.539 li201.327 101.201 li202.071 101.476 li202.266 100.963 li200.664 100.369 li200.464 100.897 li200.75 101.003 li199.048 105.479 li199.577 105.675 li199.984 104.606 li205.532 106.663 li205.126 107.732 li205.655 107.928 li207.595 102.824 li206.265 102.331 licp208.76 95.8075 mo208.484 97.0742 li202.763 95.7526 li203.236 93.5768 li204.069 93.7691 li204.189 93.2177 li202.465 92.8195 li202.345 93.3709 li202.642 93.4396 li201.448 98.9235 li201.151 98.8548 li201.034 99.3913 li202.758 99.7895 li202.875 99.253 li202.043 99.0608 li202.516 96.8851 li208.238 98.2068 li207.962 99.4734 li208.512 99.6004 li209.31 95.9346 li208.76 95.8075 li0 0 0 1 cmykf95.3404 67.7061 mo95.2102 68.2395 li96.1134 68.4623 li95.5061 70.9515 li89.8497 69.5559 li90.1209 68.4447 li89.5286 68.2985 li88.7116 71.647 li89.3038 71.7932 li89.575 70.6819 li95.2757 72.0886 li95.0046 73.1998 li95.5524 73.335 li96.8359 68.0751 li95.3404 67.7061 licp97.8689 63.5314 mo97.4889 64.6102 li91.9706 62.6034 li92.3506 61.5245 li91.7773 61.316 li90.6322 64.5671 li91.2055 64.7755 li91.5855 63.6966 li97.1039 65.7035 li96.7239 66.7823 li97.2542 66.9752 li98.3993 63.7242 li97.8689 63.5314 licp96.4194 53.1316 mo96.9532 52.1199 li96.4117 51.8389 li94.9812 54.5502 li95.5227 54.8312 li96.0636 53.806 li99.9351 55.8154 li93.5223 57.3154 li92.6042 59.0554 li93.1457 59.3364 li93.6438 58.3922 li94.1381 58.3051 li98.9979 60.8273 li98.4641 61.839 li98.965 62.0989 li100.396 59.3877 li99.8946 59.1277 li99.3537 60.1529 li95.3603 58.0803 li102.027 56.5574 li102.241 56.1527 li96.4194 53.1316 licp107.135 47.9847 mo106.677 48.6131 li102.313 49.032 li101.586 45.6294 li102.143 44.8654 li101.65 44.5055 li100.123 46.6002 li100.615 46.9601 li101.002 46.4303 li101.81 50.2134 li106.548 49.747 li107.591 48.3176 li107.135 47.9847 licp104.835 51.1392 mo104.161 52.0633 li99.4194 48.599 li100.094 47.6748 li99.6008 47.3149 li97.5698 50.0997 li98.0623 50.4596 li98.7364 49.5354 li103.478 52.9998 li102.804 53.9239 li103.259 54.2569 li105.29 51.4721 li104.835 51.1392 licp110.311 45.8992 mo111.653 44.5243 111.579 42.1122 110.146 40.7198 cv108.735 39.3485 106.327 39.3477 104.985 40.7226 cv103.621 42.1193 103.674 44.5102 105.095 45.892 cv106.539 47.2951 108.947 47.296 110.311 45.8992 cvcp105.283 37.9286 mo104.977 37.6309 104.491 37.6265 104.192 37.9321 cv103.894 38.2376 103.911 38.7222 104.217 39.0198 cv104.513 39.3068 104.999 39.3112 105.297 39.0057 cv105.595 38.7001 105.578 38.2156 105.283 37.9286 cvcp103.258 40.0018 mo102.952 39.7042 102.466 39.6998 102.168 40.0053 cv101.87 40.3108 101.887 40.7954 102.193 41.093 cv102.488 41.38 102.974 41.3844 103.272 41.0789 cv103.571 40.7734 103.554 40.2888 103.258 40.0018 cvcp105.433 41.18 mo106.328 40.2634 108.026 40.4674 109.251 41.6579 cv110.487 42.8591 110.746 44.5362 109.841 45.4637 cv108.946 46.3803 107.248 46.1547 106.012 44.9535 cv104.798 43.7737 104.538 42.0965 105.433 41.18 cvcp115.661 40.1458 mo114.754 40.8418 li111.13 36.2211 li111.832 35.6829 li112.558 35.1261 113.309 35.2427 113.911 36.0108 cv114.485 36.7429 114.4 37.6727 113.71 38.2016 cv113.626 38.2666 113.568 38.2917 113.449 38.3632 cv113.751 38.7473 li114.009 38.607 114.115 38.5447 114.297 38.4056 cv115.422 37.5426 115.671 36.1794 114.881 35.1713 cv114.099 34.1752 112.932 34.0707 111.855 34.8966 cv108.926 37.1422 li109.302 37.6223 li110.21 36.9263 li113.834 41.547 li112.926 42.243 li113.274 42.687 li116.01 40.5899 li115.661 40.1458 licp121.579 36.154 mo120.608 36.7598 li117.52 31.7655 li118.491 31.1598 li118.17 30.6409 li115.246 32.4661 li115.567 32.985 li116.537 32.3793 li119.625 37.3736 li118.655 37.9792 li118.951 38.4592 li121.875 36.634 li121.579 36.154 licp126.844 27.0164 mo127.88 26.5325 li127.628 25.9769 li124.851 27.2737 li125.103 27.8294 li126.153 27.339 li127.954 31.3121 li122.018 28.5964 li120.235 29.4288 li120.487 29.9845 li121.454 29.5328 li121.895 29.7649 li124.155 34.7521 li123.119 35.2361 li123.352 35.75 li126.129 34.4532 li125.896 33.9391 li124.846 34.4296 li122.988 30.3314 li129.137 33.1835 li129.551 32.9899 li126.844 27.0164 licp136.778 28.3249 mo137.897 28.0221 li137.748 27.4778 li134.406 28.3821 li134.555 28.9264 li135.674 28.6237 li136.141 30.3301 li135.702 30.5752 135.504 30.6604 135.21 30.7402 cv133.458 31.2142 131.867 30.2543 131.368 28.4302 cv130.917 26.7827 131.727 25.2363 133.273 24.818 cv133.847 24.6626 134.34 24.6714 135.095 24.8306 cv135.28 25.5073 li135.825 25.3598 li135.346 23.6092 li134.801 23.7566 li134.91 24.1539 li133.994 24.1014 133.528 24.1327 132.954 24.288 cv130.805 24.8697 129.579 26.8605 130.138 28.9053 cv130.706 30.9794 132.721 32.0456 134.944 31.4441 cv135.783 31.217 136.369 30.932 137.314 30.2814 cv136.778 28.3249 licp140.125 29.7858 mo140.759 30.0358 141.326 30.126 141.9 30.0457 cv143.153 29.8702 143.972 28.8779 143.818 27.7445 cv143.684 26.7623 143.256 26.3294 141.858 25.7858 cv141.516 25.6489 141.125 25.488 140.701 25.3163 cv140.146 25.0859 139.951 24.8976 139.898 24.5047 cv139.814 23.8852 140.228 23.4267 140.938 23.3274 cv141.346 23.2703 141.628 23.3078 142.26 23.5428 cv142.363 24.2983 li142.922 24.2201 li142.675 22.4068 li142.116 22.485 li142.168 22.8628 li141.697 22.6822 141.244 22.6377 140.746 22.7075 cv139.538 22.8766 138.703 23.8711 138.852 24.9592 cv138.973 25.8507 139.498 26.3162 140.918 26.7951 cv142.258 27.2544 142.719 27.5902 142.798 28.1645 cv142.878 28.7538 142.392 29.253 141.637 29.3587 cv141.123 29.4305 140.682 29.3537 140.028 29.0756 cv139.921 28.2898 li139.362 28.368 li139.62 30.2569 li140.178 30.1787 li140.125 29.7858 licp157.361 22.7135 mo154.302 22.5197 li154.261 23.1283 li155.403 23.2007 li155.15 27.0051 li155.067 28.2377 154.187 29.0682 153.045 28.9959 cv151.934 28.9255 151.245 28.026 151.328 26.7782 cv151.583 22.9587 li152.739 23.0319 li152.78 22.4232 li149.325 22.2043 li149.284 22.813 li150.441 22.8863 li150.165 27.0254 li150.07 28.4559 151.187 29.5812 152.816 29.6843 cv154.551 29.7942 155.813 28.7434 155.923 27.0999 cv156.179 23.2499 li157.321 23.3222 li157.361 22.7135 licp166.016 25.2342 mo167.127 25.5054 li167.267 24.9116 li164.289 24.1849 li164.149 24.7787 li165.275 25.0535 li164.274 29.2991 li161.251 23.4438 li159.34 22.9774 li159.2 23.5712 li160.237 23.8243 li160.443 24.2825 li159.186 29.6118 li158.075 29.3407 li157.946 29.8899 li160.924 30.6166 li161.053 30.0674 li159.927 29.7926 li160.959 25.4134 li164.067 31.5091 li164.511 31.6175 li166.016 25.2342 licp170.38 32.9935 mo169.31 32.587 li171.408 27.1026 li172.477 27.5091 li172.695 26.9393 li169.473 25.7145 li169.255 26.2843 li170.324 26.6908 li168.227 32.1751 li167.158 31.7687 li166.956 32.2958 li170.178 33.5206 li170.38 32.9935 licp179.738 31.0667 mo180.305 31.3656 li180.585 30.8237 li178.629 29.7917 li178.349 30.3337 li179.118 30.7393 li175.254 34.0288 li175.678 28.9246 li176.528 29.3729 li176.808 28.831 li174.192 27.4503 li173.911 27.9922 li174.572 28.3409 li173.96 35.5016 li174.284 35.6724 li179.738 31.0667 licp183.244 39.4133 mo182.78 39.0918 li182.321 39.757 li180.19 38.2799 li181.707 36.0834 li183.311 37.1956 li182.878 37.8232 li183.342 38.1446 li184.546 36.4 li184.073 36.0911 li183.657 36.6935 li182.053 35.5814 li183.5 33.4853 li185.556 34.9103 li185.105 35.5629 li185.556 35.8757 li186.527 34.47 li186.063 34.1485 li185.89 34.3995 li181.954 31.6713 li181.633 32.1357 li182.573 32.7873 li179.212 37.6572 li178.272 37.0055 li177.951 37.47 li182.438 40.5806 li183.244 39.4133 licp189.088 45.7517 mo188.776 45.4607 li188.53 45.2321 188.441 44.8993 188.508 44.4405 cv188.866 41.9396 li189.726 42.49 190.686 42.3632 191.374 41.6072 cv192.205 40.6932 192.066 39.6677 190.983 38.6597 cv188.348 36.2073 li187.938 36.6587 li188.775 37.438 li184.824 41.7821 li183.987 41.0027 li183.607 41.4202 li186.13 43.7687 li186.51 43.3512 li185.672 42.5718 li187.376 40.6988 li187.923 41.208 li187.465 44.1365 li187.354 44.8251 187.403 44.9534 187.894 45.4106 cv188.709 46.1692 li189.088 45.7517 licp189.623 38.2278 mo190.405 38.9552 li190.985 39.4955 190.98 40.1363 190.405 40.7682 cv189.841 41.3887 189.115 41.4841 188.579 40.9853 cv187.787 40.2475 li189.623 38.2278 licp189.821 46.9961 mo189.951 47.6689 190.178 48.1974 190.552 48.64 cv191.369 49.6066 192.64 49.7624 193.508 49.0174 cv194.26 48.3717 194.394 47.7743 194.102 46.2959 cv194.034 45.9321 193.96 45.5135 193.878 45.0618 cv193.774 44.4671 193.828 44.1999 194.129 43.9416 cv194.603 43.5344 195.21 43.6371 195.672 44.1844 cv195.938 44.4989 196.058 44.7582 196.199 45.421 cv195.62 45.9177 li195.984 46.3486 li197.373 45.1565 li197.009 44.7256 li196.719 44.974 li196.619 44.4773 196.414 44.07 196.089 43.6857 cv195.302 42.754 194.022 42.5865 193.188 43.3017 cv192.506 43.8879 192.396 44.585 192.753 46.0469 cv193.085 47.4308 193.05 48.0035 192.61 48.381 cv192.159 48.7684 191.48 48.6273 190.988 48.045 cv190.653 47.649 190.481 47.2335 190.365 46.5293 cv190.967 46.0127 li190.603 45.5818 li189.156 46.8235 li189.52 47.2544 li189.821 46.9961 licp195.365 53.7557 mo194.713 52.8156 li199.541 49.4738 li200.193 50.4138 li200.694 50.0666 li198.731 47.2339 li198.229 47.5812 li198.881 48.5212 li194.053 51.863 li193.401 50.923 li192.937 51.2441 li194.901 54.0768 li195.365 53.7557 licp198.54 59.282 mo197.935 58.1354 li203.108 55.3583 li204.147 57.3278 li203.395 57.7316 li203.658 58.2308 li205.217 57.394 li204.954 56.895 li204.685 57.0392 li202.066 52.0753 li202.335 51.9311 li202.078 51.4455 li200.52 52.2822 li200.776 52.7678 li201.528 52.3638 li202.567 54.3332 li197.394 57.1103 li196.789 55.9637 li196.292 56.2306 li198.042 59.5488 li198.54 59.282 licp202.438 66.3758 mo202.238 65.8484 li201.482 66.136 li200.561 63.7125 li203.055 62.7629 li203.749 64.5876 li203.036 64.859 li203.237 65.3864 li205.218 64.6321 li205.003 64.1101 li204.319 64.3706 li203.625 62.5458 li206.005 61.6396 li206.894 63.9775 li206.153 64.2597 li206.348 64.7729 li207.945 64.1652 li207.744 63.6377 li207.459 63.7463 li205.757 59.2699 li205.23 59.4707 li205.636 60.5399 li200.106 62.6454 li199.7 61.5762 li199.172 61.777 li201.113 66.8805 li202.438 66.3758 licp203.222 72.6838 mo202.915 71.4244 li208.622 70.0414 li209.149 72.2046 li208.319 72.4058 li208.453 72.9539 li210.172 72.5372 li210.039 71.989 li209.742 72.0608 li208.412 66.6084 li208.708 66.5366 li208.578 66.0032 li206.859 66.4199 li206.989 66.9532 li207.819 66.7521 li208.347 68.9153 li202.64 70.2983 li202.333 69.0389 li201.785 69.1718 li202.674 72.8166 li203.222 72.6838 li0 0 0 1 cmykf% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailerAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.14 0)%%+ procset Adobe_CoolType_Core (2.18 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %%EOF