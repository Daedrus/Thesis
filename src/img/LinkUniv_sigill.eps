%!PS-Adobe-3.1 EPSF-3.0%%BoundingBox: 4 4 128 128
%%HiResBoundingBox: 4.149 4.360 127.852 127.544
%%Title: LinkUniv_sigill_sv%%Creator: Adobe InDesign 2.0.2%%For: svarteld%%CreationDate: (m\214ndag 28 februari 2005  14.05.01)%%CropBox: 0 0 132 132%%LanguageLevel: 2%%DocumentNeededResources: (atend)%%DocumentSuppliedResources: (atend)%%DocumentNeededFeatures: (atend)%%DocumentSuppliedFeatures: (atend)%%DocumentData: Binary%%Pages: (atend)%%DocumentProcessColors: (atend)%%DocumentCustomColors: (atend)%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 62 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup () cvn eq{						pop (Process)					}if				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/get_gstate_and_matrix{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_ctm matrix currentmatrix def	end	get_gstate}def/set_gstate_and_matrix{	set_gstate	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_ctm setmatrix	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/clonearray{	dup xcheck exch	dup length array exch	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 	{	Adobe_AGM_Core/AGMCORE_tmp AGMCORE_tmp 1 add ddf 	dup type /dicttype eq		{			AGMCORE_tmp			exch			clonedict			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	dup type /arraytype eq		{			AGMCORE_tmp exch			clonearray			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 		} if	exch dup	AGMCORE_tmp 4 -1 roll put	}forall	exch {cvx} if}bdf/clonedict{	dup length dict	begin		{		dup type /dicttype eq			{				clonedict			} if		dup type /arraytype eq			{				clonearray			} if		def		}forall	currentdict	end}bdf/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 206 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/AGMCORE_Default_PageSize nd/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin		/dictstackcount countdictstack def		/showpage {} def	mark} def/graphic_cleanup{	cleartomark		dictstackcount 1 countdictstack 1 sub {end}for		end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_tmpmatrix matrix def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall	/currentpagedevice currentpagedevice def}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		initializepage		/initializepage{}def		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		/mysetup where {		/mysetup [1 0 0 1 0 0] put	}if	Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put	level2		{Adobe_AGM_Core /AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if}def/driver_check_media_override{	/PrepsDict where		{pop}		{		Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne		Adobe_AGM_Core /AGMCORE_Default_PageSize get type /arraytype eq			{			Adobe_AGM_Core /AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and			Adobe_AGM_Core /AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and			}if			{			Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix			}if		}ifelse}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.18 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.18 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined{/Adobe_CoolType_Core userdict/Adobe_CoolType_Coreget def}if userdict/Adobe_CoolType_Core 60 dict dup begin put/Adobe_CoolType_Version 2.18 def/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2? not{/currentglobal falsedef/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dict def}if currentpacking truesetpacking/@_SaveStackLevels{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array putput get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1index exch 0 exch putinterval 1 index exch/args exch put}{pop}ifelse}ifelsebegin count 2 sub 1 index lt{pop count 1 sub}if dup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exch getinterval astore pop}{pop}ifelsecount 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add defcountdictstack 1 sub @dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel @dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def currentglobal truesetglobal/CTHasResourceForAllBug Level2?{1 dict dup begin mark{(*){pop stop}128 string/Category resourceforall}stopped cleartomark currentdict eq dup{end}if not}{false}ifelse def/CTHasResourceStatusBug Level2?{mark{/steveamerige/Category resourcestatus}stopped{cleartomark true}{cleartomark currentglobalnot}ifelse}{false}ifelse def setglobal/CTResourceStatus{mark 3 1 roll/Categoryfindresource begin({ResourceStatus} stopped)0()/SubFileDecode filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse end}bind def/CTWorkAroundBugs{Level2?{/cid_PreLoad/ProcSet resourcestatus{pop popcurrentglobal mark{(*){dup/CMap CTHasResourceStatusBug{CTResourceStatus}{resourcestatus}ifelse{pop dup 0 eq exch 1 eq or{dup/CMap findresource gchecksetglobal/CMap undefineresource}{pop CTHasResourceForAllBug{exit}{stop}ifelse}ifelse}{pop}ifelse}128 string/CMap resourceforall}stopped{cleartomark}stoppedpop setglobal}if}if}bind def/doc_setup{Adobe_CoolType_Core beginCTWorkAroundBugs/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 10 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def/InVMFontsByCMap 10 dict def/InVMDeepCopiedFonts 10 dictdef end put}bind def/doc_trailer{currentdict Adobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}binddef/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfontsystemdict begin userdict begin/globaldict where{/globaldict get begin}if dupwhere pop exch get/globaldict where{pop end}if end endAdobe_CoolType_Core_Defined{/systemfindfont exch def}{/findfont 1 index def/systemfindfont exch def}ifelse/undefinefont{pop}ndf/copyfont{currentglobal 31 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 indexlength add 1 add dict begin exch{1 index/FID eq{pop pop}{def}ifelse}forall dupnull eq{pop}{{def}forall}ifelse currentdict end exch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal dup length array copy exchsetglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 indexknown{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory 3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1 roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1 index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exch dup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if def currentdict end definefontpop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategies known{exch $Strategies exch 2copy known{get 2 copy maxlength exch maxlength add dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init get exec}if end/$Strategy exchdef}{pop pop pop}ifelse}{pop pop}ifelse end}bind def/scff{$SubstituteFontbegin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def/$inVMIndex $sname null eq{1 index $str cvs dup length $slensub $slen getinterval cvn}{$sname}ifelse def end{findfont}@Stopped{dup length8 add string exch 1 index 0(BadFont:)putinterval 1 index exch 8 exch duplength string cvs putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if$SubstituteFont begin/$sname null def/$slen 0 def/$inVMIndex null def end}binddef/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$inVMIndex null def/$doSmartSub true def/$depth 0def/$fontname null def/$italicangle 26.5 def/$dstack null def/$Strategies 10dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dictbegin/UseFont exch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exch definefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup0 1 255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dupbegin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch Adobe_CoolType_Data/InVMDeepCopiedFonts get 1 index/FontName get known{pop Adobe_CoolType_Data/InVMDeepCopiedFonts get 1 indexget null copyfont}{$deepcopyfont}ifelse exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefontAdobe_CoolType_Data/InVMDeepCopiedFonts get begin dup/FontBasedOn get 1 indexdef end}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0 setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120sub x 10 div exch moveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlinetoclosepath gsave Level2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall pop grestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobal exch dup gcheck setglobal null copyfont begin/FontBasedOncurrentdict/FontName known{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName $fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dup begin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dup sin exch cos div 1 0 0]matrixconcatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict enddefinefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$Oblique SetSubstituteStrategy/$findfontByEnum{duptype/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs duplength $slen sub $slen getinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval/$match false def $SubstituteFont/$dstackcountdictstack array dictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdicttrue $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{beginfalse}ifelse}forall pop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch pop pop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dupbegin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]def end def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dict dup/FontName/copied put copyfontbegin/FDepVector FDepVector copyarray 0 1 2 index length 1 sub{2 copy get$deepcopyfont dup/FontName/copied put/copied exch definefont 3 copy put poppop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}binddef/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index$cmapname $fontpat cvs putinterval $cmapname length add $str exch 0 exchgetinterval cvn}bind def/$findfontByROS{/$fontname exch def $ROS Registry 2copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelsefalse exch{dup/CIDFont resourcestatus{pop pop save 1 index/CIDFontfindresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch popexch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs$buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnlyknown{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo get dup/Registryget Registry eq exch/Ordering get Ordering eq and and{exch restore exch poptrue exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end end currentdict/$errorknown currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Categoryresourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def duplength $slen gt $sname null ne or $slen 0 gt and{$sname null eq{dup $str cvsdup length $slen sub $slen getinterval cvn}{$sname}ifelse Adobe_CoolType_Data/InVMFontsByCMap get 1 index 2 copy known{get false exch{pop currentglobal{GlobalFontDirectory 1 index known{exch pop true exit}{pop}ifelse}{FontDirectory 1 index known{exch pop true exit}{GlobalFontDirectory 1 indexknown{exch pop true exit}{pop}ifelse}ifelse}ifelse}forall}{pop pop false}ifelse{exch pop exch pop}{dup/CMap resourcestatus{pop pop dup/$cmapname exchdef/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS}{128 stringcvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop poppop $findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 indexsub exch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll addgetinterval exch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1 roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for duptype/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop$findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0 def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$findfontByEnum}{//SubstituteFont exec}ifelse end}}ifelse bind readonlydef Adobe_CoolType_Core/scfindfont/systemfindfont load put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontName known{dup/FontName getdup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFound true def}if exch pop{$slen 0 gt$sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfontdup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forallcurrentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse$origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core_Defined not{Adobe_CoolType_Core/findfont{$SubstituteFontbegin $depth 0 eq{/$fontname 1 index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont$SubstituteFont begin/$depth $depth 1 sub def $substituteFound $depth 0 eq and{$inVMIndex null ne{dup $inVMIndex $AddInVMFont}if $doSmartSub{currentdict/$Strategy known{$Strategy/$BuildFont get exec}if}if}if end}bind put}if}if end/$AddInVMFont{exch/FontName 2 copy known{get 1 dict dup begin exch 1 indexgcheck def end exch Adobe_CoolType_Data/InVMFontsByCMap get exch $DictAdd}{poppop pop}ifelse}bind def/$DictAdd{2 copy known not{2 copy 4 index length dictput}if Level2? not{2 copy get dup maxlength exch length 4 index length add lt2 copy get dup length 4 index length add exch maxlength 1 index lt{2 mul dictbegin 2 copy get{forall}def 2 copy currentdict put end}{pop}ifelse}if getbegin{def}forall end}bind def end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.14 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.14 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_BadResourceImplementation? ct_Level2?{savecurrentglobal true setglobal/Generic/Category findresource dup length dictcopy dup/InstanceType/dicttype put/egiremaevets exch/Category defineresourcepop setglobal/foo 1 dict dup/s 3 put/egiremaevets defineresource pop restoremark{/bar 1 dict dup/a 7 put/egiremaevets defineresource}stopped{cleartomarktrue}{cleartomark false}ifelse currentglobal true setglobal/egiremaevets/Category undefineresource setglobal}{false}ifelse def/ct_UseNativeCapability?systemdict/composefont known def/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2string def/dst_string 1500 string def/nullstring()def/usewidths? true def enddef ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevel known{pop/CIDFont findresource/GlyphDirectory get}{1index/CIDFont findresource/GlyphDirectory get dup type/dicttype eq{dup dupmaxlength exch length sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFont findresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3dict begin/vm exch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vm setglobal/gvm currentglobal def $ gcheck setglobal}if?{$ begin}if}def/?{$ type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data beginbegin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcode exch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256mod put stringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 3 1 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevelknown{gvm setglobal}if end}def/:{string currentfile exch readstring pop}executeonly def end ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.001 0 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx exch errordict exch get exec stop}bind def/ct_reraise{cvx$error/errorname get(Error: )print dup(                    )cvs printerrordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1roll{2 index exch get exch 8 bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dupdst_string length gt{dup string/dst_string exch def}if 1 index ct_CID_STR_SIZEidiv/arrayIndex exch def 2 index arrayIndex get 2 index arrayIndexct_CID_STR_SIZE mul sub{dup 3 index add 2 index length le{2 index getintervaldst_string dst_index 2 index putinterval length dst_index add/dst_index exchdef exit}{1 index length 1 index sub dup 4 1 roll getinterval dst_stringdst_index 2 index putinterval pop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2 index dup length arrayIndex gt{arrayIndexget}{pop exit}ifelse 0}ifelse}loop pop pop pop dst_string 0 dst_indexgetinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark truesetglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomarksetglobal true}{cleartomark currentglobal not exch setglobal}ifelse{{mark 3 1roll/Category findresource begin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecode filter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobalend}}{{resourcestatus}}ifelse bind def ct_BadResourceImplementation?{currentglobal true setglobal/CIDFont/Category undefineresource setglobal}if/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 70 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/AGMIMG_maskSource nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	/_ctype 7 def	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				has_mask {					level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse				}{					AGMIMG_&image				}ifelse			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/process_mask_L3{	dup begin	/ImageType 1 def	end	4 dict begin		/DataDict exch def		/ImageType 3 def		/InterleaveType 3 def		/MaskDict 9 dict begin			/ImageType 1 def			/Width DataDict/Width get def			/Height DataDict/Height get def			/ImageMatrix DataDict/ImageMatrix get def			/NComponents 1 def			/BitsPerComponent 1 def			/Decode [1 0] def			/DataSource AGMIMG_maskSource def		currentdict end def	currentdict end}def/has_mask{	dup type /dicttype eq	{		dup /Mask known	{dup /Mask get}{false} ifelse	}	{false} ifelse}def/make_line_source{	begin	MultipleDataSources {		[		Decode length 2 div cvi {Width string} repeat		]	}{		Width Decode length 2 div mul cvi string	}ifelse	end}def/datasource_to_str{	exch dup type	dup /filetype eq {		pop exch readstring	}{		/arraytype eq {			exec exch copy		}{			pop		}ifelse	}ifelse	pop}def/masked_image_simulation{	3 dict begin		dup make_line_source /line_source xdf	/mask_source AGMIMG_maskSource /LZWDecode filter def	dup /Width get 8 div ceiling cvi string /mask_str xdf		begin	gsave		0 1 translate 1 -1 Height div scale		1 1 Height {		pop		gsave		MultipleDataSources {			0 1 DataSource length 1 sub {				dup DataSource exch get				exch line_source exch get				datasource_to_str			} for		}{			DataSource line_source datasource_to_str		} ifelse				<<			/PatternType 1			/PaintProc [				/pop cvx				<<					/ImageType 1					/Width Width					/Height 1					/ImageMatrix Width 1.0 sub 1 matrix scale 0.5 0 matrix translate matrix concatmatrix					/MultipleDataSources MultipleDataSources					/DataSource line_source					/BitsPerComponent BitsPerComponent					/Decode Decode				>>				/image cvx			] cvx			/BBox [0 0 Width 1]			/XStep Width			/YStep 1			/PaintType 1			/TilingType 2		>>		matrix makepattern set_pattern		<<			/ImageType 1			/Width Width			/Height 1			/ImageMatrix Width 1 matrix scale			/MultipleDataSources false			/DataSource mask_source mask_str readstring pop			/BitsPerComponent 1			/Decode [1 0]		>>		imagemask				grestore				0 1 translate	} for	grestore	end	end}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					has_mask {						level3 {process_mask_L3 image}{masked_image_simulation}ifelse					}{						image					}ifelse				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{							currentoverprint not{								1 AGMCORE_&setgray								currentdict imageormask_sys							}{								currentdict ignoreimagedata							}ifelse				 								}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{									currentoverprint not Operator/imagemask eq and{  			 							1 AGMCORE_&setgray  			 							currentdict imageormask_sys  			 						}{  			 							currentdict ignoreimagedata  			 						}ifelse								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not Operator/imagemask ne and{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								has_mask {									level3 {process_mask_L3 image}{masked_image_simulation}ifelse								}{									image								}ifelse							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{ 							currentoverprint not Name (All) eq or Operator/imagemask eq and{								currentdict imageormask_sys 								}{								currentoverprint not									{ 									gsave  									knockout_unitsq 									grestore									}if								currentdict consumeimagedata 		 					}ifelse 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			has_mask {				level3 {process_mask_L3 AGMIMG_&image}{masked_image_simulation}ifelse			}{				AGMIMG_&image			}ifelse		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/cachemask_level2{	3 dict begin	/LZWEncode filter /WriteFilter xdf	/readBuffer 256 string def		/ReadFilter		currentfile		0 (%EndMask) /SubFileDecode filter		/ASCII85Decode filter		/RunLengthDecode filter	def		{		ReadFilter readBuffer readstring exch		WriteFilter exch writestring		not {exit} if	}loop	WriteFilter closefile	end}def/cachemask_level3{	currentfile	<<		/Filter [ /SubFileDecode /ASCII85Decode /RunLengthDecode ]		/DecodeParms [ << /EODCount 0 /EODString (%EndMask) >> null null ]		/Intent 1	>>	/ReusableStreamDecode filter}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResourcecurrentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetupAdobe_AGM_Utils begin2 2010 Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get execcurrentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: 1 1%%EndPageComments%%BeginPageSetupAdobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -132 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark% page clipgsavenewpathgsave % PSGState0 0 mo0 132 li132 132 li132 0 liclp[1 0 0 1 0 0 ] concat44.2456 24.4936 mo44.2456 51.9045 li65.3975 64.0808 li65.3975 49.0416 li58.7512 45.1607 li58.7512 24.4936 li44.2456 24.4936 lifalse sop0 0 0 1 cmykf73.8015 24.4929 mo73.8015 45.1607 li67.1535 49.0416 li67.1535 64.0808 li88.162 51.8553 li88.162 24.4929 li73.8015 24.4929 li0 0 0 1 cmykf68.0319 65.6097 mo89.1859 53.2878 li112.714 66.9206 li105.486 79.4373 li87.8276 69.2006 li81.1809 73.1313 li68.0319 65.6097 li0 0 0 1 cmykf67.1535 67.1178 mo67.1535 91.6996 li90.7323 105.382 li97.9821 92.7598 li80.157 82.399 li80.157 74.4917 li67.1535 67.1178 li0 0 0 1 cmykf65.3926 67.1178 mo65.3926 91.7205 li42.0298 105.374 li34.7318 92.6427 li52.4877 82.3092 li52.4877 74.5962 li65.3926 67.1178 li0 0 0 1 cmykf43.3992 53.3533 mo64.5024 65.6271 li51.5981 73.1953 li44.7095 69.2172 li27.0021 79.5501 li19.7254 67.0823 li43.3992 53.3533 li0 0 0 1 cmykf121.056 65.2261 mo124.103 67.065 li127.149 65.2261 li124.103 63.3873 li121.056 65.2261 licp0 0 0 1 cmyk0.5 lw0 lc0 lj4 ml[] 0 dshtrue sadjgsave[1.02707 -1.02707 1.02707 1.02707 303.348 558.189 ] concatsgrestore newpath4.8512 65.2261 mo7.89745 67.065 li10.9437 65.2261 li7.89745 63.3873 li4.8512 65.2261 licp0 0 0 1 cmykgsave[1.02707 -1.02707 1.02707 1.02707 187.143 558.189 ] concatsgrestore newpath8.5051 82.6497 mo8.37494 82.1164 li7.4686 82.3265 li6.86121 79.8373 li12.537 78.5214 li12.8082 79.6327 li13.4025 79.4949 li12.5854 76.1464 li11.9911 76.2842 li12.2623 77.3954 li6.54188 78.7215 li6.27072 77.6103 li5.72098 77.7378 li7.00443 82.9977 li8.5051 82.6497 licp9.25781 87.9262 mo8.8778 86.8473 li14.4218 84.9129 li14.8018 85.9918 li15.3778 85.7908 li14.2327 82.5398 li13.6567 82.7407 li14.0367 83.8196 li8.49273 85.7541 li8.11273 84.6752 li7.57992 84.8611 li8.725 88.1121 li9.25781 87.9262 licp18.4571 93.8192 mo18.9661 94.8436 li19.5107 94.5685 li18.1465 91.8233 li17.6019 92.0984 li18.1178 93.1363 li14.2244 95.1031 li16.7551 89.0234 li15.8795 87.2616 li15.335 87.5367 li15.8101 88.4927 li15.5919 88.9447 li10.7048 91.4134 li10.1958 90.3891 li9.69208 90.6435 li11.0563 93.3888 li11.56 93.1343 li11.0442 92.0963 li15.0601 90.0677 li12.3999 96.3665 li12.6035 96.7763 li18.4571 93.8192 licp19.2732 105.204 mo18.8148 104.575 li19.7609 100.308 li23.2321 100.667 li23.7893 101.431 li24.2846 101.075 li22.7569 98.9799 li22.2615 99.336 li22.6479 99.8659 li18.7886 99.466 li17.7725 104.104 li18.815 105.533 li19.2732 105.204 licp16.9725 102.049 mo16.2985 101.125 li21.0663 97.6972 li21.7403 98.6214 li22.2356 98.2652 li20.2046 95.4805 li19.7092 95.8365 li20.3833 96.7607 li15.6155 100.189 li14.9415 99.264 li14.4833 99.5933 li16.5143 102.379 li16.9725 102.049 licp21.9243 109.089 mo23.2667 110.464 25.6919 110.459 27.1319 109.074 cv28.5499 107.71 28.62 105.316 27.2775 103.941 cv25.9137 102.544 23.5105 102.528 22.0815 103.902 cv20.6305 105.298 20.5604 107.693 21.9243 109.089 cvcp30.0755 104.318 mo30.3833 104.022 30.4017 103.538 30.1034 103.233 cv29.8051 102.927 29.3178 102.93 29.0101 103.226 cv28.7133 103.512 28.6948 103.995 28.9932 104.301 cv29.2915 104.606 29.7787 104.603 30.0755 104.318 cvcp28.0511 102.244 mo28.3589 101.948 28.3773 101.465 28.079 101.16 cv27.7807 100.854 27.2934 100.857 26.9856 101.153 cv26.6889 101.439 26.6704 101.922 26.9688 102.227 cv27.2671 102.533 27.7543 102.53 28.0511 102.244 cvcp26.8051 104.374 mo27.7001 105.29 27.4464 106.973 26.2152 108.157 cv24.9731 109.352 23.2809 109.562 22.3753 108.634 cv21.4803 107.718 21.7557 106.035 22.9978 104.841 cv24.218 103.667 25.9102 103.457 26.8051 104.374 cvcp29.0105 114.402 mo28.1197 113.685 li31.7565 109.075 li32.4454 109.63 li33.1581 110.204 33.2219 110.96 32.6173 111.726 cv32.0411 112.457 31.1171 112.594 30.4401 112.048 cv30.357 111.981 30.3189 111.931 30.2214 111.833 cv29.9192 112.216 li30.1165 112.434 30.2021 112.522 30.3802 112.666 cv31.4849 113.556 32.8688 113.476 33.6623 112.47 cv34.4463 111.476 34.2724 110.318 33.2153 109.466 cv30.3408 107.151 li29.963 107.63 li30.8538 108.348 li27.217 112.958 li26.3261 112.24 li25.9766 112.683 li28.661 114.845 li29.0105 114.402 licp35.5037 118.78 mo34.5334 118.174 li37.6297 113.185 li38.6 113.791 li38.9217 113.272 li35.9979 111.447 li35.6762 111.966 li36.6465 112.571 li33.5501 117.56 li32.5798 116.955 li32.2823 117.434 li35.2061 119.259 li35.5037 118.78 licp46.356 117.605 mo47.3925 118.089 li47.6441 117.534 li44.8665 116.237 li44.6148 116.792 li45.665 117.283 li43.8656 121.256 li42.0336 114.914 li40.2509 114.082 li39.9992 114.637 li40.9666 115.089 li41.0794 115.579 li38.8205 120.567 li37.7841 120.083 li37.5513 120.597 li40.3289 121.894 li40.5618 121.38 li39.5115 120.89 li41.3676 116.791 li43.2359 123.386 li43.6505 123.58 li46.356 117.605 licp53.4158 123.913 mo54.5346 124.216 li54.68 123.671 li51.3382 122.766 li51.1928 123.311 li52.3116 123.614 li51.8559 125.324 li51.3533 125.314 51.1394 125.288 50.845 125.208 cv49.0931 124.734 48.2022 123.103 48.6894 121.275 cv49.1295 119.625 50.6078 118.698 52.1536 119.116 cv52.7278 119.271 53.1487 119.527 53.7209 120.046 cv53.5401 120.723 li54.0848 120.871 li54.5524 119.117 li54.0077 118.97 li53.9016 119.368 li53.1371 118.861 52.719 118.653 52.1449 118.497 cv49.9956 117.916 47.9342 119.017 47.388 121.065 cv46.834 123.143 48.0379 125.08 50.2609 125.682 cv51.1 125.909 51.7497 125.959 52.8932 125.873 cv53.4158 123.913 licp56.9382 126.58 mo57.4876 126.981 58.0124 127.21 58.5881 127.276 cv59.8458 127.419 60.8928 126.664 61.0343 125.529 cv61.157 124.545 60.8537 124.019 59.6412 123.144 cv59.3456 122.926 59.0084 122.672 58.6427 122.4 cv58.1653 122.039 58.025 121.808 58.0741 121.414 cv58.1514 120.794 58.6702 120.454 59.3824 120.535 cv59.7915 120.582 60.0548 120.689 60.6061 121.074 cv60.5118 121.831 li61.0724 121.895 li61.2988 120.079 li60.7382 120.015 li60.691 120.393 li60.2818 120.101 59.8556 119.945 59.3556 119.888 cv58.1434 119.749 57.0812 120.503 56.9454 121.592 cv56.834 122.485 57.2226 123.067 58.4729 123.885 cv59.6513 124.665 60.0114 125.105 59.9397 125.68 cv59.8661 126.27 59.2678 126.632 58.5101 126.545 cv57.995 126.486 57.5877 126.302 57.0269 125.869 cv57.125 125.082 li56.5644 125.018 li56.3285 126.91 li56.8891 126.974 li56.9382 126.58 licp74.5225 120.046 mo71.4631 120.24 li71.5099 120.848 li72.6514 120.776 li72.9434 124.578 li73.0381 125.81 72.2839 126.744 71.1424 126.816 cv70.0312 126.887 69.22 126.082 69.1242 124.835 cv68.8311 121.018 li69.9878 120.945 li69.9411 120.336 li66.486 120.555 li66.5327 121.164 li67.6895 121.09 li68.0072 125.227 li68.117 126.656 69.3848 127.631 71.0134 127.527 cv72.7486 127.417 73.8493 126.217 73.7232 124.574 cv73.4277 120.727 li74.5692 120.654 li74.5225 120.046 licp82.1522 118.77 mo83.2635 118.499 li83.1201 117.906 li80.142 118.633 li80.2854 119.226 li81.4114 118.951 li82.4367 123.191 li77.1046 119.374 li75.1933 119.84 li75.3366 120.433 li76.3738 120.18 li76.7633 120.493 li78.0503 125.815 li76.9391 126.086 li77.0717 126.635 li80.0498 125.908 li79.9172 125.359 li78.7911 125.634 li77.7336 121.261 li83.2493 125.253 li83.6937 125.144 li82.1522 118.77 licp89.4535 122.303 mo88.3843 122.709 li86.2871 117.225 li87.3563 116.818 li87.1384 116.249 li83.9166 117.473 li84.1344 118.043 li85.2036 117.637 li87.3009 123.121 li86.2317 123.528 li86.4332 124.055 li89.655 122.83 li89.4535 122.303 licp93.7722 113.62 mo94.3387 113.321 li94.0607 112.778 li92.1049 113.81 li92.3828 114.353 li93.1517 113.947 li93.5997 119.039 li89.7121 115.762 li90.5619 115.314 li90.2839 114.771 li87.6671 116.151 li87.9451 116.694 li88.606 116.346 li94.0502 120.957 li94.374 120.786 li93.7722 113.62 licp102.126 114.056 mo101.662 114.377 li102.118 115.045 li99.9869 116.522 li98.4814 114.318 li100.086 113.206 li100.516 113.835 li100.98 113.514 li99.7838 111.764 li99.3286 112.098 li99.7416 112.702 li98.1372 113.814 li96.7005 111.711 li98.7561 110.286 li99.2034 110.941 li99.6547 110.628 li98.6911 109.218 li98.2274 109.539 li98.3994 109.791 li94.4638 112.519 li94.7821 112.985 li95.7221 112.334 li99.0601 117.22 li98.1201 117.872 li98.4384 118.337 li102.926 115.227 li102.126 114.056 licp109.646 108.581 mo109.333 108.872 li109.088 109.101 108.753 109.163 108.306 109.058 cv105.872 108.49 li106.486 107.668 106.44 106.69 105.753 105.934 cv104.921 105.02 103.9 105.075 102.817 106.083 cv100.182 108.536 li100.593 108.987 li101.43 108.207 li105.382 112.551 li104.544 113.33 li104.924 113.748 li107.447 111.399 li107.067 110.982 li106.23 111.761 li104.526 109.888 li105.073 109.379 li107.92 110.084 li108.589 110.253 108.72 110.215 109.211 109.757 cv110.026 108.999 li109.646 108.581 licp102.279 107.418 mo103.06 106.69 li103.64 106.15 104.271 106.209 104.846 106.84 cv105.41 107.461 105.444 108.201 104.908 108.699 cv104.116 109.437 li102.279 107.418 licp111.528 106.86 mo112.167 106.623 112.65 106.312 113.024 105.87 cv113.841 104.903 113.789 103.618 112.918 102.877 cv112.163 102.235 111.555 102.198 110.15 102.725 cv109.804 102.851 109.405 102.993 108.975 103.147 cv108.408 103.346 108.137 103.335 107.835 103.078 cv107.358 102.673 107.361 102.055 107.824 101.508 cv108.09 101.194 108.325 101.033 108.953 100.787 cv109.534 101.281 li109.899 100.85 li108.505 99.6637 li108.14 100.095 li108.431 100.342 li107.959 100.522 107.592 100.79 107.267 101.175 cv106.48 102.106 106.521 103.403 107.358 104.115 cv108.043 104.698 108.745 104.694 110.123 104.104 cv111.428 103.552 111.996 103.495 112.438 103.87 cv112.891 104.255 112.862 104.951 112.369 105.534 cv112.035 105.93 111.654 106.167 110.982 106.395 cv110.377 105.882 li110.013 106.313 li111.465 107.548 li111.83 107.117 li111.528 106.86 licp117.03 99.2395 mo116.378 100.18 li111.532 96.8641 li112.183 95.9241 li111.68 95.5796 li109.716 98.4123 li110.22 98.7568 li110.871 97.8167 li115.718 101.133 li115.066 102.073 li115.532 102.391 li117.495 99.5581 li117.03 99.2395 licp120.522 93.0808 mo119.917 94.2273 li114.725 91.4855 li115.764 89.5161 li116.519 89.9149 li116.783 89.4158 li115.218 88.5897 li114.955 89.0888 li115.225 89.2312 li112.606 94.1951 li112.336 94.0527 li112.08 94.5383 li113.644 95.3644 li113.9 94.8788 li113.145 94.48 li114.184 92.5106 li119.376 95.2525 li118.771 96.399 li119.27 96.6625 li121.021 93.3443 li120.522 93.0808 licp123.104 84.592 mo122.904 85.1194 li123.662 85.4004 li122.74 87.8239 li120.238 86.8962 li120.931 85.0715 li121.646 85.3365 li121.847 84.8091 li119.859 84.0723 li119.673 84.6051 li120.359 84.8595 li119.666 86.6843 li117.277 85.7991 li118.166 83.4611 li118.91 83.7367 li119.105 83.2236 li117.503 82.6299 li117.303 83.1573 li117.589 83.2634 li115.887 87.7397 li116.416 87.9358 li116.823 86.8666 li122.371 88.9232 li121.965 89.9924 li122.494 90.1885 li124.434 85.085 li123.104 84.592 licp125.599 78.0685 mo125.323 79.3352 li119.602 78.0135 li120.075 75.8378 li120.908 76.0301 li121.028 75.4787 li119.304 75.0805 li119.184 75.6319 li119.481 75.7006 li118.287 81.1845 li117.99 81.1158 li117.873 81.6523 li119.597 82.0505 li119.714 81.514 li118.882 81.3218 li119.355 79.1461 li125.077 80.4678 li124.801 81.7344 li125.351 81.8614 li126.149 78.1955 li125.599 78.0685 li0 0 0 1 cmykf12.1794 49.9671 mo12.0492 50.5005 li12.9525 50.7233 li12.3451 53.2125 li6.68874 51.8169 li6.9599 50.7057 li6.36761 50.5595 li5.55055 53.908 li6.14281 54.0542 li6.41398 52.9429 li12.1148 54.3495 li11.8436 55.4608 li12.3915 55.5959 li13.6749 50.3361 li12.1794 49.9671 licp14.708 45.7923 mo14.328 46.8712 li8.80958 44.8644 li9.18959 43.7855 li8.61625 43.577 li7.47117 46.8281 li8.04451 47.0365 li8.42452 45.9576 li13.9429 47.9645 li13.5629 49.0433 li14.0932 49.2362 li15.2383 45.9852 li14.708 45.7923 licp13.2584 35.3926 mo13.7922 34.3809 li13.2507 34.0999 li11.8203 36.8111 li12.3617 37.0922 li12.9026 36.067 li16.7742 38.0764 li10.3613 39.5763 li9.44318 41.3164 li9.98467 41.5974 li10.4829 40.6532 li10.9772 40.5661 li15.8369 43.0883 li15.3032 44.1 li15.804 44.3599 li17.2345 41.6487 li16.7336 41.3887 li16.1928 42.4139 li12.1994 40.3413 li18.8658 38.8183 li19.0793 38.4137 li13.2584 35.3926 licp23.9738 30.2457 mo23.5155 30.8741 li19.1516 31.293 li18.4242 27.8904 li18.9814 27.1264 li18.4889 26.7665 li16.9611 28.8612 li17.4537 29.2211 li17.8401 28.6913 li18.6486 32.4744 li23.387 32.008 li24.4294 30.5786 li23.9738 30.2457 licp21.6732 33.4001 mo20.9992 34.3243 li16.2584 30.86 li16.9324 29.9358 li16.4399 29.5759 li14.4089 32.3606 li14.9014 32.7206 li15.5754 31.7964 li20.3162 35.2608 li19.6422 36.1849 li20.0978 36.5179 li22.1288 33.7331 li21.6732 33.4001 licp27.1494 28.1602 mo28.4919 26.7853 28.4171 24.3732 26.9844 22.9808 cv25.5736 21.6095 23.1657 21.6087 21.8232 22.9836 cv20.4594 24.3803 20.5123 26.7712 21.934 28.153 cv23.3777 29.5561 25.7856 29.5569 27.1494 28.1602 cvcp22.1214 20.1896 mo21.8151 19.8919 21.3292 19.8875 21.0308 20.193 cv20.7325 20.4986 20.7497 20.9831 21.0559 21.2808 cv21.3512 21.5677 21.8371 21.5722 22.1355 21.2667 cv22.4338 20.9611 22.4166 20.4766 22.1214 20.1896 cvcp20.097 22.2628 mo19.7907 21.9652 19.3048 21.9607 19.0064 22.2663 cv18.7081 22.5718 18.7253 23.0564 19.0315 23.354 cv19.3268 23.641 19.8127 23.6454 20.111 23.3399 cv20.4094 23.0344 20.3922 22.5498 20.097 22.2628 cvcp22.2719 23.441 mo23.1669 22.5243 24.8648 22.7284 26.0897 23.9189 cv27.3255 25.12 27.585 26.7972 26.6794 27.7247 cv25.7844 28.6413 24.0862 28.4157 22.8504 27.2145 cv21.6364 26.0347 21.3769 24.3575 22.2719 23.441 cvcp32.4999 22.4068 mo31.5922 23.1028 li27.9686 18.4821 li28.6706 17.9439 li29.3968 17.3871 30.1472 17.5037 30.7495 18.2718 cv31.3236 19.0039 31.2388 19.9337 30.5489 20.4626 cv30.4642 20.5276 30.4064 20.5527 30.2881 20.6242 cv30.5892 21.0083 li30.8474 20.868 30.9537 20.8057 31.1352 20.6666 cv32.2608 19.8036 32.5097 18.4404 31.7191 17.4323 cv30.9379 16.4361 29.7708 16.3317 28.6936 17.1576 cv25.7646 19.4032 li26.1411 19.8833 li27.0488 19.1873 li30.6723 23.808 li29.7646 24.504 li30.1128 24.948 li32.8482 22.8509 li32.4999 22.4068 licp38.4171 18.415 mo37.4468 19.0207 li34.3588 14.0265 li35.3291 13.4208 li35.0083 12.9019 li32.0844 14.7271 li32.4053 15.246 li33.3756 14.6403 li36.4635 19.6346 li35.4932 20.2402 li35.79 20.7202 li38.7139 18.895 li38.4171 18.415 licp43.6825 9.27735 mo44.7189 8.79346 li44.467 8.2378 li41.6894 9.53467 li41.9412 10.0904 li42.9915 9.59998 li44.7924 13.5731 li38.8565 10.8574 li37.0738 11.6898 li37.3257 12.2455 li38.293 11.7938 li38.7331 12.0259 li40.9936 17.0131 li39.9572 17.4971 li40.1902 18.011 li42.9678 16.7142 li42.7349 16.2001 li41.6846 16.6905 li39.8271 12.5924 li45.9755 15.4444 li46.3901 15.2509 li43.6825 9.27735 licp53.6169 10.5859 mo54.7357 10.2831 li54.5868 9.73877 li51.245 10.6431 li51.3939 11.1874 li52.5128 10.8847 li52.9796 12.5911 li52.5407 12.8362 52.3427 12.9214 52.0482 13.0011 cv50.2964 13.4752 48.7056 12.5153 48.2065 10.6912 cv47.7558 9.04364 48.566 7.4972 50.1117 7.07892 cv50.6859 6.92353 51.1785 6.93238 51.9335 7.0915 cv52.1186 7.76819 li52.6633 7.62073 li52.1844 5.87018 li51.6397 6.01758 li51.7484 6.4148 li50.8328 6.36237 50.367 6.39362 49.7928 6.54896 cv47.6435 7.13062 46.4172 9.1214 46.9767 11.1662 cv47.5442 13.2404 49.5593 14.3066 51.7823 13.7051 cv52.6214 13.478 53.2075 13.193 54.1521 12.5424 cv53.6169 10.5859 licp56.9635 12.0468 mo57.5978 12.2968 58.1642 12.387 58.7381 12.3067 cv59.9918 12.1312 60.8109 11.1388 60.6564 10.0055 cv60.5226 9.0232 60.0943 8.59034 58.6965 8.04676 cv58.3546 7.9098 57.9633 7.74897 57.5397 7.57728 cv56.985 7.34687 56.79 7.15857 56.7365 6.76563 cv56.6521 6.14612 57.0668 5.68769 57.7767 5.58832 cv58.1845 5.53126 58.4667 5.56879 59.0989 5.80372 cv59.2019 6.55927 li59.7607 6.48108 li59.5137 4.66773 li58.9548 4.74592 li59.0063 5.12372 li58.5353 4.94318 58.0829 4.89869 57.5845 4.96845 cv56.3762 5.13752 55.542 6.13202 55.6902 7.2201 cv55.8117 8.11164 56.3369 8.57715 57.7566 9.05604 cv59.0967 9.51532 59.558 9.85114 59.6362 10.4255 cv59.7165 11.0148 59.2304 11.514 58.4752 11.6197 cv57.9617 11.6915 57.5203 11.6147 56.8667 11.3365 cv56.7596 10.5508 li56.2008 10.629 li56.4581 12.5179 li57.017 12.4397 li56.9635 12.0468 licp74.1999 4.97443 mo71.1406 4.78064 li71.1 5.38929 li72.2416 5.46168 li71.9882 9.266 li71.9061 10.4987 71.0254 11.3292 69.8838 11.2569 cv68.7727 11.1865 68.0837 10.287 68.1668 9.03913 cv68.4212 5.21961 li69.578 5.29285 li69.6185 4.68415 li66.1634 4.46522 li66.1229 5.07392 li67.2797 5.14722 li67.004 9.28638 li66.9087 10.7168 68.0259 11.8422 69.6545 11.9453 cv71.3897 12.0552 72.6519 11.0044 72.7614 9.36084 cv73.0178 5.51087 li74.1594 5.58314 li74.1999 4.97443 licp82.8542 7.49518 mo83.9655 7.76636 li84.1054 7.17255 li81.1273 6.44587 li80.9874 7.03968 li82.1134 7.3144 li81.1127 11.5601 li78.09 5.70472 li76.1786 5.23835 li76.0387 5.83216 li77.0758 6.08521 li77.2812 6.54346 li76.025 11.8728 li74.9138 11.6017 li74.7843 12.1509 li77.7624 12.8776 li77.8919 12.3284 li76.7659 12.0536 li77.7981 7.67432 li80.9052 13.7701 li81.3497 13.8785 li82.8542 7.49518 licp87.2182 15.2544 mo86.149 14.848 li88.2462 9.36359 li89.3154 9.77009 li89.5333 9.20026 li86.3115 7.97547 li86.0936 8.54523 li87.1628 8.95173 li85.0655 14.4361 li83.9964 14.0297 li83.7948 14.5568 li87.0166 15.7815 li87.2182 15.2544 licp96.5771 13.3277 mo97.1436 13.6266 li97.4238 13.0847 li95.4679 12.0527 li95.1877 12.5947 li95.9566 13.0003 li92.0924 16.2898 li92.517 11.1855 li93.3667 11.6339 li93.6469 11.092 li91.0301 9.71125 li90.7499 10.2532 li91.4109 10.6019 li90.7985 17.7626 li91.1223 17.9334 li96.5771 13.3277 licp100.083 21.6742 mo99.6189 21.3528 li99.1598 22.018 li97.029 20.5409 li98.5452 18.3444 li100.15 19.4566 li99.7163 20.0842 li100.181 20.4056 li101.385 18.6609 li100.912 18.352 li100.497 18.9545 li98.8917 17.8424 li100.339 15.7463 li102.395 17.1713 li101.944 17.8239 li102.395 18.1367 li103.366 16.7309 li102.902 16.4095 li102.729 16.6605 li98.7926 13.9322 li98.472 14.3967 li99.4121 15.0483 li96.0504 19.9182 li95.1103 19.2665 li94.7898 19.7309 li99.2769 22.8415 li100.083 21.6742 licp105.927 28.0127 mo105.615 27.7217 li105.369 27.4931 105.28 27.1603 105.347 26.7015 cv105.705 24.2006 li106.565 24.751 107.525 24.6242 108.213 23.8682 cv109.044 22.9542 108.905 21.9287 107.822 20.9207 cv105.187 18.4683 li104.777 18.9197 li105.614 19.699 li101.663 24.0431 li100.826 23.2637 li100.446 23.6812 li102.969 26.0297 li103.349 25.6122 li102.512 24.8328 li104.215 22.9598 li104.762 23.469 li104.304 26.3975 li104.193 27.0861 104.242 27.2143 104.733 27.6716 cv105.548 28.4302 li105.927 28.0127 licp106.463 20.4888 mo107.244 21.2162 li107.824 21.7565 107.819 22.3973 107.244 23.0292 cv106.68 23.6497 105.954 23.745 105.418 23.2463 cv104.626 22.5085 li106.463 20.4888 licp106.66 29.2571 mo106.79 29.9299 107.017 30.4584 107.391 30.901 cv108.208 31.8676 109.479 32.0234 110.347 31.2784 cv111.099 30.6327 111.233 30.0353 110.941 28.5569 cv110.873 28.1931 110.799 27.7745 110.717 27.3227 cv110.613 26.7281 110.667 26.4609 110.968 26.2026 cv111.442 25.7953 112.049 25.8981 112.511 26.4454 cv112.777 26.7599 112.897 27.0192 113.038 27.682 cv112.459 28.1787 li112.823 28.6096 li114.212 27.4175 li113.848 26.9866 li113.558 27.235 li113.458 26.7383 113.253 26.331 112.929 25.9467 cv112.141 25.015 110.861 24.8475 110.027 25.5627 cv109.345 26.1489 109.235 26.846 109.592 28.3079 cv109.924 29.6918 109.889 30.2645 109.449 30.642 cv108.998 31.0294 108.319 30.8883 107.827 30.306 cv107.492 29.91 107.32 29.4945 107.204 28.7903 cv107.806 28.2737 li107.442 27.8428 li105.995 29.0845 li106.359 29.5154 li106.66 29.2571 licp112.204 36.0166 mo111.552 35.0766 li116.38 31.7348 li117.032 32.6748 li117.533 32.3276 li115.57 29.4949 li115.068 29.8422 li115.72 30.7822 li110.892 34.124 li110.24 33.184 li109.776 33.5051 li111.74 36.3378 li112.204 36.0166 licp115.379 41.543 mo114.774 40.3964 li119.947 37.6193 li120.986 39.5887 li120.234 39.9926 li120.497 40.4918 li122.056 39.655 li121.793 39.1559 li121.524 39.3002 li118.905 34.3363 li119.174 34.1921 li118.918 33.7065 li117.359 34.5431 li117.615 35.0287 li118.367 34.6248 li119.407 36.5942 li114.233 39.3713 li113.628 38.2247 li113.131 38.4916 li114.881 41.8098 li115.379 41.543 licp119.277 48.6368 mo119.077 48.1094 li118.321 48.397 li117.4 45.9735 li119.894 45.0239 li120.588 46.8486 li119.875 47.12 li120.076 47.6474 li122.057 46.8931 li121.842 46.3711 li121.158 46.6316 li120.464 44.8068 li122.844 43.9006 li123.733 46.2385 li122.992 46.5207 li123.187 47.0339 li124.784 46.4261 li124.583 45.8987 li124.298 46.0073 li122.596 41.5309 li122.069 41.7317 li122.475 42.8009 li116.945 44.9064 li116.539 43.8372 li116.011 44.038 li117.952 49.1415 li119.277 48.6368 licp120.061 54.9448 mo119.754 53.6854 li125.461 52.3024 li125.988 54.4656 li125.158 54.6667 li125.292 55.2149 li127.011 54.7982 li126.878 54.25 li126.581 54.3218 li125.251 48.8694 li125.547 48.7975 li125.417 48.2642 li123.698 48.6809 li123.828 49.2142 li124.658 49.0131 li125.186 51.1763 li119.479 52.5593 li119.172 51.2999 li118.624 51.4328 li119.513 55.0776 li120.061 54.9448 li0 0 0 1 cmykf% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailerAdobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%%TrailerAdobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.14 0)%%+ procset Adobe_CoolType_Core (2.18 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %%EOF